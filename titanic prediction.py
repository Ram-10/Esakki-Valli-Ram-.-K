import pandas as pd
a=pd.read_csv("tested.csv")
print(a)
a.isna()
a["Cabin"] = a["Cabin"].astype(str)
a["Age"]=a["Age"].fillna(0)
a["SibSp"]=a["SibSp"].fillna(0)
a["Parch"]=a["Parch"].fillna(0)
a["Ticket"]=a["Ticket"].fillna(0)
a["Fare"]=a["Fare"].fillna(0)
a["Cabin"]=a["Cabin"].fillna(0)
print(a)
from sklearn import preprocessing
s=preprocessing.LabelEncoder()
a["Name"]=s.fit_transform(a["Name"])
a["Sex"]=s.fit_transform(a["Sex"])
a["Ticket"]=s.fit_transform(a["Ticket"])
a["Cabin"]=s.fit_transform(a["Cabin"])
a["Embarked"]=s.fit_transform(a["Embarked"])

x=a.iloc[:,:-1].values
print()
print("*****SEPARATING THE ROWS AND COLUMNS*****")
print()
print("*****FEATURES*****:")
print()
print(x)
print()
print("*****TARGET VALUES*****:")
print()
y=a["Survived"]
print(y)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x,y ,test_size=0.20, shuffle=True)
print()
print("*****DATA SPLITTING*****:")
print()
print("*****TRAINING VALUES IN X TRAIN*****:")
print()
print(x_train)
print()
print("*****TEST VALUES IN X TEST*****:")
print()
print(x_test)
print()
print("*****TRAINING VALUES IN Y TRAIN*****:")
print()
print(y_train)
print()
print("*****TEST VALUES IN Y TEST*****:")
print()
print(y_test)
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
l=LogisticRegression()
l.fit(x_train,y_train)
prediction1=l.predict(x_test)
print()
print("******DATA CLASSIFICATION******")
print()
print("****ACCURACY BY USING LOGISTIC REGRESSION ALGORITHM****:")
print()
print("ACCURACY =",accuracy_score(y_test,prediction1))
from sklearn.tree import DecisionTreeClassifier
v=DecisionTreeClassifier()
v.fit(x_train,y_train)
prediction2=v.predict(x_test)
print("******DATA CLASSIFICATION******")
print()
print("****ACCURACY BY USING DECISION TREE CLASSIFIER ALGORITHM****:")
print()
print("ACCURACY = ",accuracy_score(y_test,prediction2))
from sklearn.ensemble import RandomForestClassifier
r=RandomForestClassifier()
r.fit(x_train,y_train)
prediction3=r.predict(x_test)
print("******DATA CLASSIFICATION******")
print("****ACCURACY BY USING RANDOM FOREST CLASSFIER ALGORITHM****:")
print(" ACCURACY = ",accuracy_score(y_test,prediction3))

from sklearn.naive_bayes import GaussianNB
g=GaussianNB()
g.fit(x_train,y_train)
prediction4=g.predict(x_test)
print("******DATA CLASSIFICATION******")
print("****ACCURACY BY USING GAUSSIAN NB ALGORITHM****:")
print("ACCURACY = ",accuracy_score(y_test,prediction4))


from matplotlib import pyplot as plt
print("******DATA VISUALIZATION*******")
print("*****LINE PLOT FOR Pclass AND SEX*****:")
plt.plot(a["Pclass"],a["Sex"])
print("*****BAR CHART FOR Embarked AND Survived*****:")
plt.bar(a["Embarked"],a["Survived"])
print("*****SCATTER PLOT FOR Sibsp AND Parch*****:")
plt.scatter(a["SibSp"],a["Parch"])
print("******HISTOGRAM FOR Fare******:")
plt.hist(a["Fare"])
import seaborn as s
print("*****IMPLOT FOR AGE AND Survived*****:")
s.lmplot(x="Age",y="Survived",data=a)
import seaborn as s
print("*****IMPLOT FOR AGE AND Survived*****:")
s.lmplot(x="Age",y="Survived",data=a)
print("*****BAR PLOT FOR Survived AND Cabin*****:")
s.barplot(x="Survived",y="Cabin",data=a)
print("*****BOX PLOT FOR Pclass AND Survived*****:")
s.boxplot(x="Pclass",y="Survived",data=a)
print("*****DISTRIBUTION FOR Name*****:")
s.distplot(a.Name)
s.countplot(x=a["SibSp"],hue=a["Survived"])
